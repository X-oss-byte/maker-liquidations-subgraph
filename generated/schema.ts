// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Bid extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Bid entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Bid entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Bid", id.toString(), this);
  }

  static load(id: string): Bid | null {
    return store.get("Bid", id) as Bid | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get bid(): BigInt {
    let value = this.get("bid");
    return value.toBigInt();
  }

  set bid(value: BigInt) {
    this.set("bid", Value.fromBigInt(value));
  }

  get lot(): BigInt {
    let value = this.get("lot");
    return value.toBigInt();
  }

  set lot(value: BigInt) {
    this.set("lot", Value.fromBigInt(value));
  }

  get guy(): Bytes {
    let value = this.get("guy");
    return value.toBytes();
  }

  set guy(value: Bytes) {
    this.set("guy", Value.fromBytes(value));
  }

  get tic(): BigInt {
    let value = this.get("tic");
    return value.toBigInt();
  }

  set tic(value: BigInt) {
    this.set("tic", Value.fromBigInt(value));
  }

  get end(): BigInt {
    let value = this.get("end");
    return value.toBigInt();
  }

  set end(value: BigInt) {
    this.set("end", Value.fromBigInt(value));
  }

  get usr(): Bytes {
    let value = this.get("usr");
    return value.toBytes();
  }

  set usr(value: Bytes) {
    this.set("usr", Value.fromBytes(value));
  }

  get gal(): Bytes {
    let value = this.get("gal");
    return value.toBytes();
  }

  set gal(value: Bytes) {
    this.set("gal", Value.fromBytes(value));
  }

  get tab(): BigInt {
    let value = this.get("tab");
    return value.toBigInt();
  }

  set tab(value: BigInt) {
    this.set("tab", Value.fromBigInt(value));
  }

  get dealt(): boolean {
    let value = this.get("dealt");
    return value.toBoolean();
  }

  set dealt(value: boolean) {
    this.set("dealt", Value.fromBoolean(value));
  }
}
